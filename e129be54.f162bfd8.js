(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return k})),n.d(t,"metadata",(function(){return g})),n.d(t,"toc",(function(){return v})),n.d(t,"default",(function(){return O}));var a=n(3),i=n(7),l=n(0),r=n.n(l),c=n(103),d=n(116),o=n(100),b=n(92),s=n.n(b);const u=37,m=39;var p=function(e){const{lazy:t,block:n,defaultValue:a,values:i,groupId:c,className:b}=e,{tabGroupChoices:p,setTabGroupChoices:h}=Object(d.a)(),[k,g]=Object(l.useState)(a),v=l.Children.toArray(e.children);if(null!=c){const e=p[c];null!=e&&e!==k&&i.some((t=>t.value===e))&&g(e)}const j=e=>{g(e),null!=c&&h(c,e)},O=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":n},b)},i.map((({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":k===e,className:Object(o.a)("tabs__item",s.a.tabItem,{"tabs__item--active":k===e}),key:e,ref:e=>O.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case m:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case u:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(O,e.target,e)},onFocus:()=>j(e),onClick:()=>{j(e)}},t)))),t?Object(l.cloneElement)(v.filter((e=>e.props.value===k))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},v.map(((e,t)=>Object(l.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))};var h=function({children:e,hidden:t,className:n}){return r.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:n}),e)},k={id:"dockerbuild",title:"Building Netkit-JH with Docker",sidebar_label:"Building with Docker"},g={unversionedId:"dev/guides/dockerbuild",id:"dev/guides/dockerbuild",isDocsHomePage:!1,title:"Building Netkit-JH with Docker",description:"The current Netkit-JH build scripts currently rely on being run on a Debian Bullseye host. An alternative to creating a full VM for Netkit development is using a docker container based on a Debian Bullseye image.",source:"@site/docs/dev/guides/dockerbuildguide.mdx",slug:"/dev/guides/dockerbuild",permalink:"/docs/dev/guides/dockerbuild",editUrl:"https://github.com/netkit-jh/netkit-jh.github.io/edit/main/docs/dev/guides/dockerbuildguide.mdx",version:"current",sidebar_label:"Building with Docker",sidebar:"someSidebar",previous:{title:"Features and Improvements Currently Under Development",permalink:"/docs/dev/featuresinprogress"},next:{title:"Creating Kernel Patches",permalink:"/docs/dev/guides/kernelpatches"}},v=[{value:"Install Docker",id:"install-docker",children:[]},{value:"Clone the Netkit Build Repo",id:"clone-the-netkit-build-repo",children:[]},{value:"Building the Docker Image",id:"building-the-docker-image",children:[]},{value:"Running the Build Process in the Docker Image",id:"running-the-build-process-in-the-docker-image",children:[]}],j={toc:v};function O(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},j,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"The current Netkit-JH build scripts currently rely on being run on a Debian Bullseye host. An alternative to creating a full VM for Netkit development is using a docker container based on a Debian Bullseye image."),Object(c.b)("h2",{id:"install-docker"},"Install Docker"),Object(c.b)("h2",{id:"clone-the-netkit-build-repo"},"Clone the Netkit Build Repo"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ git clone https://github.com/netkit-jh/netkit-jh-build.git\n$ cd netkit-jh-build\n")),Object(c.b)("p",null,"The following commands assume that your working directory\nis the root of this repo."),Object(c.b)("h2",{id:"building-the-docker-image"},"Building the Docker Image"),Object(c.b)("p",null,"First we need to build a docker image which will be used for building Netkit-JH."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ docker build -t netkit-builder-deb .\n")),Object(c.b)("p",null,"This creates an image under the name 'netkit-builder-deb'."),Object(c.b)("h2",{id:"running-the-build-process-in-the-docker-image"},"Running the Build Process in the Docker Image"),Object(c.b)("p",null,"To compile all components of Netkit-JH (the kernel, the filesystem and the core executables) run:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ docker run --privileged -v $(pwd):/netkit-build -it netkit-builder-deb\n")),Object(c.b)("p",null,"If you would like to pass your own arguments to ",Object(c.b)("inlineCode",{parentName:"p"},"make"),", you can add ",Object(c.b)("inlineCode",{parentName:"p"},'-e MAKE_ARGS=""')," to the docker command, with the necessary ",Object(c.b)("inlineCode",{parentName:"p"},"make")," arguments. Some examples are shown below:"),Object(c.b)(p,{defaultValue:"kern",values:[{label:"Kernel",value:"kern"},{label:"Filesystem",value:"fs"},{label:"Core",value:"core"},{label:"Clean",value:"clean"}],mdxType:"Tabs"},Object(c.b)(h,{value:"kern",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ docker run --privileged -v $(pwd):/netkit-build -e MAKE_ARGS="build-kernel" -it netkit-builder-deb\n\n'))),Object(c.b)(h,{value:"fs",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ docker run --privileged -v $(pwd):/netkit-build -e MAKE_ARGS="build-fs" -it netkit-builder-deb\n\n'))),Object(c.b)(h,{value:"core",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ docker run --privileged -v $(pwd):/netkit-build -e MAKE_ARGS="build-core" -it netkit-builder-deb\n\n'))),Object(c.b)(h,{value:"clean",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ docker run --privileged -v $(pwd):/netkit-build -e MAKE_ARGS="clean" -it netkit-builder-deb\n\n')))),Object(c.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(c.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(c.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"The kernel must be built before the filesystem! This is because the kernel modules are copied over to the filesystem as part of the fs build process. If you don't give any MAKE_ARGS this won't be an issue, but if you decide to give ",Object(c.b)("inlineCode",{parentName:"p"},'MAKE_ARGS="build-fs"')," before the kernel has been built, it will not build successfully."))))}O.isMDXComponent=!0}}]);